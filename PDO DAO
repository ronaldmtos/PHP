config 

//Essa função registra uma função de autoload, permitindo que o PHP carregue 
//automaticamente as classes quando são usadas, sem a necessidade de incluí-las manualmente.
spl_autoload_register(function($class_name){

    // Define o caminho do arquivo que contém a classe
    $filename = "class".DIRECTORY_SEPARATOR.$class_name.".php";

    // Verifica se o arquivo existe antes de incluí-lo
    if (file_exists($filename)) {
        require_once($filename);
    }

});























Class SQL 
<?php 

// DEFINE A CLASSE SQL, QUE HERDA DE PDO (CONEXÃO COM O BANCO)
class Sql extends PDO {

	// ATRIBUTO PRIVADO PARA ARMAZENAR A CONEXÃO COM O BANCO
	private $conn;

	// MÉTODO CONSTRUTOR PARA INICIAR A CONEXÃO COM O BANCO DE DADOS
	public function __construct(){

		// ESTABELECE A CONEXÃO COM O BANCO DE DADOS MYSQL
		$this->conn = new PDO("mysql:host=localhost;dbname=dbphp7", "root", "root");

	}

	// MÉTODO PRIVADO PARA CONFIGURAR MULTIPLOS PARÂMETROS NA DECLARAÇÃO
	private function setParams($statement, $parameters = array()){

		// FAZ UM LOOP EM TODOS OS PARÂMETROS PASSADOS
		foreach ($parameters as $key => $value) {
			
			// CHAMA O MÉTODO SETPARAM PARA DEFINIR CADA PARÂMETRO INDIVIDUAL
			$this->setParam($statement, $key, $value);

		}

	}

	// MÉTODO PRIVADO PARA DEFINIR UM ÚNICO PARÂMETRO NA DECLARAÇÃO
	private function setParam($statement, $key, $value){

		// ASSOCIA O VALOR AO PARÂMETRO ESPECÍFICO NA DECLARAÇÃO PREPARADA
		$statement->bindParam($key, $value);

	}

	// MÉTODO PÚBLICO PARA EXECUTAR UMA CONSULTA SQL CRUA (RAW QUERY)
	public function query($rawQuery, $params = array()){

		// PREPARA A CONSULTA SQL CRUA
		$stmt = $this->conn->prepare($rawQuery);

		// CONFIGURA OS PARÂMETROS PASSADOS
		$this->setParams($stmt, $params);

		// EXECUTA A CONSULTA
		$stmt->execute();

		// RETORNA O OBJETO DECLARAÇÃO (STATEMENT) RESULTANTE
		return $stmt;

	}

	// MÉTODO PÚBLICO PARA EXECUTAR CONSULTAS DE SELEÇÃO E RETORNAR RESULTADOS COMO ARRAY
	public function select($rawQuery, $params = array()):array
	{

		// CHAMA O MÉTODO QUERY PARA EXECUTAR A CONSULTA
		$stmt = $this->query($rawQuery, $params);

		// RETORNA TODOS OS RESULTADOS DA CONSULTA COMO UM ARRAY ASSOCIATIVO
		return $stmt->fetchAll(PDO::FETCH_ASSOC);

	}

}

?>














Class Usuario
<?php 

// CLASSE USUARIO
class Usuario {

	// PROPRIEDADES PRIVADAS
	private $idusuario; // ID DO USUÁRIO
	private $deslogin;  // LOGIN DO USUÁRIO
	private $dessenha;  // SENHA DO USUÁRIO
	private $dtcadastro; // DATA DE CADASTRO DO USUÁRIO

	// MÉTODO GET PARA IDUSUARIO
	public function getIdusuario(){
		return $this->idusuario;
	}

	// MÉTODO SET PARA IDUSUARIO
	public function setIdusuario($value){
		$this->idusuario = $value;
	}

	// MÉTODO GET PARA DESLOGIN
	public function getDeslogin(){
		return $this->deslogin;
	}

	// MÉTODO SET PARA DESLOGIN
	public function setDeslogin($value){
		$this->deslogin = $value;
	}

	// MÉTODO GET PARA DESSENHA
	public function getDessenha(){
		return $this->dessenha;
	}

	// MÉTODO SET PARA DESSENHA
	public function setDessenha($value){
		$this->dessenha = $value;
	}

	// MÉTODO GET PARA DTCADASTRO
	public function getDtcadastro(){
		return $this->dtcadastro;
	}

	// MÉTODO SET PARA DTCADASTRO
	public function setDtcadastro($value){
		$this->dtcadastro = $value;
	}
	
	// MÉTODO PARA CARREGAR UM USUÁRIO PELO ID
	public function loadById($id){

		$sql = new Sql();

		// EXECUTA CONSULTA NO BANCO PARA ENCONTRAR USUÁRIO COM ID ESPECÍFICO
		$results = $sql->select("SELECT * FROM tb_usuarios WHERE idusuario = :ID", array(
			":ID"=>$id
		));

		// SE ENCONTRAR UM RESULTADO, CONFIGURA OS DADOS NO OBJETO
		if (count($results) > 0) {

			$this->setData($results[0]);

		}

	}

	// MÉTODO ESTÁTICO PARA RETORNAR LISTA DE USUÁRIOS
	public static function getList(){

		$sql = new Sql();

		return $sql->select("SELECT * FROM tb_usuarios ORDER BY deslogin;");

	}

	// MÉTODO ESTÁTICO PARA BUSCAR USUÁRIOS POR LOGIN
	public static function search($login){

		$sql = new Sql();

		return $sql->select("SELECT * FROM tb_usuarios WHERE deslogin LIKE :SEARCH ORDER BY deslogin", array(
			':SEARCH'=>"%".$login."%"
		));

	}

	// MÉTODO PARA REALIZAR LOGIN DO USUÁRIO
	public function login($login, $password){

		$sql = new Sql();

		// VERIFICA SE EXISTE USUÁRIO COM LOGIN E SENHA INFORMADOS
		$results = $sql->select("SELECT * FROM tb_usuarios WHERE deslogin = :LOGIN AND dessenha = :PASSWORD", array(
			":LOGIN"=>$login,
			":PASSWORD"=>$password
		));

		// SE EXISTIR, CONFIGURA OS DADOS NO OBJETO
		if (count($results) > 0) {

			$this->setData($results[0]);

		} else {

			// CASO NÃO ENCONTRE, LANÇA EXCEÇÃO
			throw new Exception("Login e/ou senha inválidos.");

		}

	}

	// MÉTODO PARA CONFIGURAR DADOS NO OBJETO
	public function setData($data){

		$this->setIdusuario($data['idusuario']);
		$this->setDeslogin($data['deslogin']);
		$this->setDessenha($data['dessenha']);
		$this->setDtcadastro(new DateTime($data['dtcadastro']));

	}

	// MÉTODO PARA INSERIR NOVO USUÁRIO NO BANCO
	public function insert(){

		$sql = new Sql();

		// CHAMA PROCEDURE PARA INSERIR USUÁRIO E RETORNA DADOS DO USUÁRIO CRIADO
		$results = $sql->select("CALL sp_usuarios_insert(:LOGIN, :PASSWORD)", array(
			':LOGIN'=>$this->getDeslogin(),
			':PASSWORD'=>$this->getDessenha()
		));

		if (count($results) > 0) {
			$this->setData($results[0]);
		}

	}

	// MÉTODO PARA ATUALIZAR LOGIN E SENHA DO USUÁRIO
	public function update($login, $password){

		$this->setDeslogin($login);
		$this->setDessenha($password);

		$sql = new Sql();

		$sql->query("UPDATE tb_usuarios SET deslogin = :LOGIN, dessenha = :PASSWORD WHERE idusuario = :ID", array(
			':LOGIN'=>$this->getDeslogin(),
			':PASSWORD'=>$this->getDessenha(),
			':ID'=>$this->getIdusuario()
		));

	}

	// MÉTODO PARA DELETAR USUÁRIO DO BANCO
	public function delete(){

		$sql = new Sql();

		$sql->query("DELETE FROM tb_usuarios WHERE idusuario = :ID", array(
			':ID'=>$this->getIdusuario()
		));

		// RESETA OS DADOS DO OBJETO
		$this->setIdusuario(0);
		$this->setDeslogin("");
		$this->setDessenha("");
		$this->setDtcadastro(new DateTime());

	}

	// CONSTRUTOR DA CLASSE, PERMITE CONFIGURAR LOGIN E SENHA AO CRIAR OBJETO
	public function __construct($login = "", $password = ""){

		$this->setDeslogin($login);
		$this->setDessenha($password);

	}

	// MÉTODO MÁGICO __TOSTRING PARA CONVERTER OBJETO EM JSON
	public function __toString(){

		return json_encode(array(
			"idusuario"=>$this->getIdusuario(),
			"deslogin"=>$this->getDeslogin(),
			"dessenha"=>$this->getDessenha(),
			"dtcadastro"=>$this->getDtcadastro()->format("d/m/Y H:i:s")
		));

	}

} 	

?> 





